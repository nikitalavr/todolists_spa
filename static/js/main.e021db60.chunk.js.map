{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","setAppIsInitializedAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","isLoggedIn","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","auth","todolists","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","setIsLoggedInAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","name","handleChange","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKA+FYA,EAOAC,E,iCCxFGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,0CDPRQ,E,OAAWC,EAAMC,OAAO,CAC5BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACP,UAAW,0CAKFC,EAAe,WAExB,OAAON,EAASO,IAAoB,eAF3BD,EAAe,SAIXE,GACb,OAAOR,EAASS,KAGd,aAAc,CAAED,WARTF,EAAe,SAUXI,GACb,OAAOV,EAASW,OAAT,qBAA4CD,KAX1CJ,EAAe,SAaXI,EAAYF,GACzB,OAAOR,EAASY,IAAT,qBACSF,GACd,CAAEF,WAhBKF,EAAe,SAmBjBO,GACP,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YApBEP,EAAe,SAsBfO,EAAoBC,GAC7B,OAAOd,EAASW,OAAT,qBACSE,EADT,kBAC6BC,KAxB3BR,EAAe,SA2BfO,EAAoBL,GAC7B,OAAOR,EAASS,KAAT,qBAGSI,EAHT,UAG6B,CAAEL,WA/B7BF,EAAe,SAiCfO,EAAoBC,EAAgBC,GAC7C,OAAOf,EAASY,IAAT,qBAGSC,EAHT,kBAG6BC,GAAUC,IAIrCC,EAAU,WAEnB,OAAOhB,EAASO,IAAwC,YAF/CS,EAAU,SAIfC,GAMJ,OAAOjB,EAASS,KAGd,aAAcQ,IAbPD,EAAU,WAgBnB,OAAOhB,EAASW,OAAqB,gB,SA2B7BtB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KEtGZ,IAAM4B,EAAiC,CACrCC,OAAQ,OACRC,MAAO,KACPC,eAAe,GA6BJC,EAAgB,SAACF,GAAD,MAC1B,CAAEG,KAAM,gBAAiBH,UACfI,EAAiB,SAACL,GAAD,MAC3B,CAAEI,KAAM,iBAAkBJ,WAChBM,EAAwB,SAACJ,GAAD,MAClC,CAAEE,KAAM,yBAA0BF,kBCjC/BH,EAA0C,G,OCAnCQ,EAAuB,SAAIT,EAAuBU,GACvDV,EAAKW,SAASC,OACdF,EAASL,EAAcL,EAAKW,SAAS,KAErCD,EAASL,EAAc,wBAE3BK,EAASH,EAAe,YAGfM,EAA2B,SAACV,EAA4BO,GACjEA,EAASL,EAAcF,EAAMW,QAAUX,EAAMW,QAAU,wBACvDJ,EAASH,EAAe,YCRtBN,EAA+B,GAmFxBc,EAAe,SAAClB,EAAgBmB,EAAwCpB,GAAzD,OACxB,SAACc,EAAyBO,GACtB,IACMC,EADQD,IACKE,MAAMvB,GAAYwB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOI,KACxD,GAAKqB,EAAL,CAMA,IAAMI,EAA6B,aAC/BC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChBnC,MAAO2B,EAAK3B,MACZW,OAAQgB,EAAKhB,QACVc,GAGP3B,EAAwBO,EAAYC,EAAQyB,GACvC7C,MAAK,SAAAkD,GACF,GAA4B,IAAxBA,EAAI3B,KAAK4B,WAAkB,CAC3B,IAAMC,EArEE,SAAChC,EAAgBC,EAAkCF,GAAnD,MAA2E,CACnGU,KAAM,cACNR,QACAF,aACAC,UAiE+BiC,CAAajC,EAAQmB,EAAapB,GACjDc,EAASmB,QAETpB,EAAqBkB,EAAI3B,KAAMU,MAGtCqB,OAAM,SAAC5B,GACJU,EAAyBV,EAAOO,WAxBpCsB,QAAQC,KAAK,iC,4DCtFZC,EAAcC,IAAMC,MAAK,YAA8D,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAC/FN,QAAQO,IAAI,sBADmF,MAGvEC,mBAAS,IAH8D,mBAG1FjD,EAH0F,KAGnFkD,EAHmF,OAIvED,mBAAwB,MAJ+C,mBAI1FrC,EAJ0F,KAInFuC,EAJmF,KAMzFC,EAAiB,WACE,KAAjBpD,EAAMqD,QACNP,EAAQ9C,GACRkD,EAAS,KAETC,EAAS,sBAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRR,SAAUA,EACVnC,QAASA,EACT4C,MAAOxD,EACPyD,SAlBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAkBdI,WAfW,SAACF,GACT,OAAV9C,GACAuC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAWOU,MAAM,QACNC,WAAYnD,IAEvB,cAACoD,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAAgBL,SAAUA,EAA/D,SACI,cAACoB,EAAA,EAAD,YCzCCC,EAAexB,IAAMC,MAAK,SAAUwB,GAC7C5B,QAAQO,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,mBAEtEqB,EAFsE,KAE5DC,EAF4D,OAGnDtB,mBAASoB,EAAMb,OAHoC,mBAGtExD,EAHsE,KAG/DkD,EAH+D,KAiB3E,OAAOoB,EACD,cAAChB,EAAA,EAAD,CAAWE,MAAOxD,EAAOyD,SALX,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAIyBgB,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZF,EAAMZ,SAASzD,MAQb,sBAAM0E,cAda,WACrBH,GAAY,GACZrB,EAASmB,EAAMb,QAYb,SAAwCa,EAAMb,W,2BCb3CmB,EAAO/B,IAAMC,MAAK,SAACwB,GAC5B,IAAMO,EAAiBC,uBAAY,kBAAMR,EAAMS,WAAWT,EAAM1C,KAAKzB,GAAImE,EAAMhE,cAAa,CAACgE,EAAM1C,KAAKzB,GAAImE,EAAMhE,aAE5G0E,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrCZ,EAAMa,iBAAiBb,EAAM1C,KAAKzB,GAAI8E,EAAiBnG,EAAasG,UAAYtG,EAAauG,IAAKf,EAAMhE,cACzG,CAACgE,EAAM1C,KAAKzB,GAAImE,EAAMhE,aAEnBgF,EAAuBR,uBAAY,SAACS,GACtCjB,EAAMkB,gBAAgBlB,EAAM1C,KAAKzB,GAAIoF,EAAUjB,EAAMhE,cACtD,CAACgE,EAAM1C,KAAKzB,GAAImE,EAAMhE,aAEzB,OAAO,sBAAyBmF,UAAWnB,EAAM1C,KAAKhB,SAAW9B,EAAasG,UAAY,UAAY,GAA/F,UACH,cAACM,EAAA,EAAD,CACIR,QAASZ,EAAM1C,KAAKhB,SAAW9B,EAAasG,UAC5ClB,MAAM,UACNR,SAAUsB,IAGd,cAACX,EAAD,CAAcZ,MAAOa,EAAM1C,KAAK3B,MAAOyD,SAAU4B,IACjD,cAACrB,EAAA,EAAD,CAAYE,QAASU,EAArB,SACI,cAACc,EAAA,EAAD,QATSrB,EAAM1C,KAAKzB,OCOnByF,EAAW/C,IAAMC,MAAK,SAAUwB,GAC3C5B,QAAQO,IAAI,mBAEZ,IAAM7B,EAAWyE,cACjBC,qBAAU,WACR,GAAKxB,EAAMyB,WAAX,CACA,IJkByBzF,EIlBnB0F,GJkBmB1F,EIlBEgE,EAAM2B,SAAS9F,GJkBM,SAACiB,GACjDA,EAASH,EAAe,YACxBlB,EAAsBO,GACjBnB,MAAK,SAACkD,GACH,IAAMR,EAAQQ,EAAI3B,KAAKwF,MACvB9E,EAZc,SAACS,EAAwBvB,GAAzB,MAAiD,CACvEU,KAAM,YACNa,QACAvB,cASiB6F,CAAWtE,EAAOvB,IAC3Bc,EAASH,EAAe,mBIvBhCG,EAAS4E,MACR,IAEH,IAAMI,EAAUtB,uBACd,SAAC7E,GACCqE,EAAM8B,QAAQnG,EAAOqE,EAAM2B,SAAS9F,MAEtC,CAACmE,EAAM8B,QAAS9B,EAAM2B,SAAS9F,KAM3BkG,EAAsBvB,uBAC1B,SAAC7E,GACCqE,EAAM+B,oBAAoB/B,EAAM2B,SAAS9F,GAAIF,KAE/C,CAACqE,EAAM2B,SAAS9F,GAAImE,EAAM+B,sBAGtBC,EAAoBxB,uBACxB,kBAAMR,EAAMiC,aAAa,MAAOjC,EAAM2B,SAAS9F,MAC/C,CAACmE,EAAM2B,SAAS9F,GAAImE,EAAMiC,eAEtBC,EAAuB1B,uBAC3B,kBAAMR,EAAMiC,aAAa,SAAUjC,EAAM2B,SAAS9F,MAClD,CAACmE,EAAM2B,SAAS9F,GAAImE,EAAMiC,eAEtBE,EAA0B3B,uBAC9B,kBAAMR,EAAMiC,aAAa,YAAajC,EAAM2B,SAAS9F,MACrD,CAACmE,EAAM2B,SAAS9F,GAAImE,EAAMiC,eAGxBG,EAAmBpC,EAAMzC,MAW7B,MAT8B,WAA1ByC,EAAM2B,SAASU,SACjBD,EAAmBpC,EAAMzC,MAAM8E,QAAO,SAAC5E,GAAD,OAAOA,EAAEnB,SAAW9B,EAAauG,QAE3C,cAA1Bf,EAAM2B,SAASU,SACjBD,EAAmBpC,EAAMzC,MAAM8E,QAC7B,SAAC5E,GAAD,OAAOA,EAAEnB,SAAW9B,EAAasG,cAKnC,gCACE,+BACE,cAACf,EAAD,CACEZ,MAAOa,EAAM2B,SAAShG,MACtByD,SAAU2C,IAEZ,cAACpC,EAAA,EAAD,CACEE,QA1Ce,WACrBG,EAAMsC,eAAetC,EAAM2B,SAAS9F,KA0C9B6C,SAA0C,YAAhCsB,EAAM2B,SAASY,aAF3B,SAIE,cAAClB,EAAA,EAAD,SAGJ,cAAC/C,EAAD,CACEG,QAASqD,EACTpD,SAA0C,YAAhCsB,EAAM2B,SAASY,eAE3B,8BACGH,EAAiBI,KAAI,SAAC/E,GAAD,OACpB,cAAC6C,EAAD,CAEEhD,KAAMG,EACNzB,WAAYgE,EAAM2B,SAAS9F,GAC3B4E,WAAYT,EAAMS,WAClBS,gBAAiBlB,EAAMkB,gBACvBL,iBAAkBb,EAAMa,kBALnBpD,EAAE5B,SASb,sBAAK4G,MAAO,CAAEC,WAAY,QAA1B,UACE,cAACC,EAAA,EAAD,CACEzD,QAAmC,QAA1Bc,EAAM2B,SAASU,OAAmB,WAAa,OACxDxC,QAASmC,EACTpC,MAAO,UAHT,iBAOA,cAAC+C,EAAA,EAAD,CACEzD,QAAmC,WAA1Bc,EAAM2B,SAASU,OAAsB,WAAa,OAC3DxC,QAASqC,EACTtC,MAAO,UAHT,oBAOA,cAAC+C,EAAA,EAAD,CACEzD,QAAmC,cAA1Bc,EAAM2B,SAASU,OAAyB,WAAa,OAC9DxC,QAASsC,EACTvC,MAAO,YAHT,gC,QCxGKgD,EAA0B,WACrC,IAAMnB,EAAaoB,aACjB,SAACC,GAAD,OAAWA,EAAMC,KAAKtB,cAElBuB,EAAYH,aAChB,SAACC,GAAD,OAAWA,EAAME,aAEbzF,EAAQsF,aACZ,SAACC,GAAD,OAAWA,EAAMvF,SAEbT,EAAWyE,cAEjBC,qBAAU,WACR,GAAKC,EAAL,CAGA,IAAMC,EPIC,SAAC5E,GACJA,EAASH,EAAe,YACxBlB,IACKZ,MAAK,SAACkD,GACHjB,EARmD,CAACJ,KAAM,gBAAiBsG,UAQnDjF,EAAI3B,OAC5BU,EAASH,EAAe,kBORpCG,EAAS4E,MACR,IAEH,IAAMjB,EAAaD,uBAAY,SAAU3E,EAAYG,GACnD,IAAM0F,ELoBkB,SAACzF,EAAgBD,GAAjB,OAAwC,SAACc,GACjErB,EAAwBO,EAAYC,GAC/BpB,MAAK,SAAAkD,GACF,IAAME,EA3BU,SAAChC,EAAgBD,GAAjB,MAAyC,CAACU,KAAM,cAAeT,SAAQD,cA2BxEiH,CAAahH,EAAQD,GACpCc,EAASmB,OKxBHiF,CAAarH,EAAIG,GAC/Bc,EAAS4E,KACR,IAEGI,EAAUtB,uBAAY,SAAU7E,EAAeK,GACnD,IAAM0F,ELsBe,SAAC/F,EAAeK,GAAhB,OAAuC,SAACc,GAC7DA,EAASH,EAAe,YACxBlB,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAAkD,GACF,GAA4B,IAAxBA,EAAI3B,KAAK4B,WAAkB,CAC3B,IACMC,EApCwB,CAACvB,KAAM,WAAYY,KAmCpCS,EAAI3B,KAAKA,KAAK+G,MAE3BrG,EAASmB,GACTnB,EAASH,EAAe,mBAExBE,EAAqBkB,EAAI3B,KAAMU,MAGtCqB,OAAM,SAAC5B,GACJU,EAAyBV,EAAOO,OKpC1BsG,CAAUzH,EAAOK,GAC/Bc,EAAS4E,KACR,IAEG2B,EAAe7C,uBAAY,SAC/B3E,EACAS,EACAN,GAEA,IAAM0F,EAAQvE,EAAatB,EAAI,CAAES,UAAUN,GAC3Cc,EAAS4E,KAEX,IAEMR,EAAkBV,uBAAY,SAClC3E,EACAyH,EACAtH,GAEA,IAAM0F,EAAQvE,EAAatB,EAAI,CAAEF,MAAO2H,GAAYtH,GACpDc,EAAS4E,KAEX,IAEMO,EAAezB,uBAAY,SAC/BrB,EACAnD,GAEA,IAAMiC,EP7CuE,CAC7EvB,KAAM,yBACNb,GO2CsCG,EP1CtCqG,OO0CkDlD,GAClDrC,EAASmB,KAEX,IAEMqE,EAAiB9B,uBAAY,SAAU3E,GAC3C,IP/B6BG,EO+BvB0F,GP/BuB1F,EO+BEH,EP9BxB,SAACiB,GAEJA,EAASH,EAAe,YAExBG,EApBgF,CACpFJ,KAAM,gCAAiCb,GAmBGG,EAnBCM,OAmBW,YAClDb,EAA4BO,GACvBnB,MAAK,SAACkD,GACHjB,EAnCgB,SAACjB,GAAD,MAAiB,CAACa,KAAM,kBAAmBb,MAmClD0H,CAAiBvH,IAE1Bc,EAASH,EAAe,mBOsBpCG,EAAS4E,KACR,IAEGK,EAAsBvB,uBAAY,SAAU3E,EAAYF,GAC5D,IAAM+F,EPZ2B,SAAC7F,EAAYF,GAC9C,OAAO,SAACmB,GACJrB,EAA4BI,EAAIF,GAC3Bd,MAAK,SAACkD,GACHjB,EArDqB,SAACjB,EAAYF,GAAb,MAAgC,CACjEe,KAAM,wBACNb,KACAF,SAkDqB6H,CAAsB3H,EAAIF,QOQjC8H,CAAsB5H,EAAIF,GACxCmB,EAAS4E,KACR,IAEGgC,EAAclD,uBAClB,SAAC7E,GACC,IAAM+F,EP5BiB,SAAC/F,GAC1B,OAAO,SAACmB,GACJA,EAASH,EAAe,YACxBlB,EAA4BE,GACvBd,MAAK,SAACkD,GACHjB,EA7C0C,CAACJ,KAAM,eAAgBiF,SA6C1C5D,EAAI3B,KAAKA,KAAK+G,OACrCrG,EAASH,EAAe,kBOsBpBgH,CAAchI,GAC5BmB,EAAS4E,KAEX,CAAC5E,IAGH,OAAK2E,EAKH,qCACE,cAACmC,EAAA,EAAD,CAAMC,WAAS,EAACpB,MAAO,CAAEqB,QAAS,QAAlC,SACE,cAACxF,EAAD,CAAaG,QAASiF,MAExB,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SACGf,EAAUR,KAAI,SAACwB,GACd,IAAIC,EAAmB1G,EAAMyG,EAAGnI,IAEhC,OACE,cAAC+H,EAAA,EAAD,CAAMT,MAAI,EAAV,SACE,cAACe,EAAA,EAAD,CAAOzB,MAAO,CAAEqB,QAAS,QAAzB,SACE,cAACxC,EAAD,CACEG,WAAYA,EACZE,SAAUqC,EACVzG,MAAO0G,EACPxD,WAAYA,EACZwB,aAAcA,EACdH,QAASA,EACTjB,iBAAkBwC,EAClBf,eAAgBA,EAChBpB,gBAAiBA,EACjBa,oBAAqBA,OAZXiC,EAAGnI,YAbpB,cAAC,IAAD,CAAUsI,GAAG,Y,8EChGlBC,GAAQ7F,IAAM8F,YAAuC,SACvDrE,EAAOsE,GACP,OAAO,cAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKpF,QAAQ,UAAac,OAI3D,SAASwE,KAEZ,IAAMjI,EAAQsG,aAA6C,SAAAC,GAAK,OAAIA,EAAM2B,IAAIlI,SAExEO,EAAWyE,cAEXmD,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJ9H,EAASL,EAAc,QAG3B,OACI,cAACoI,GAAA,EAAD,CAAUC,KAAgB,OAAVvI,EAAgBwI,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACK5I,M,sDChBXF,GAAe,CACnBoF,YAAY,GAgBD2D,GAAkB,SAACjG,GAC9B,MAAO,CAAEzC,KAAM,yBAA0ByC,UChB9BkG,GAAQ,WACnB,IAAM5D,EAAaoB,aACjB,SAACC,GAAD,OAAWA,EAAMC,KAAKtB,cAElB3E,EAAWyE,cAQX+D,EAASC,aAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEdC,SAAU,SAACC,GACT,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAGT,4CAA4CM,KAAKF,EAAOJ,SAEzDK,EAAOL,MAAQ,yBAJfK,EAAOL,MAAQ,WAMZI,EAAOH,SACHG,EAAOH,SAAS1I,OAAS,IAChC8I,EAAOJ,SAAW,yBAFEI,EAAOJ,SAAW,WAGjCI,GAGTE,SAAU,SAACH,GDZb,IAACzJ,ECaGU,GDbHV,ECaoByJ,EDbW,SAAC/I,GAC/BA,EAASH,EAAe,YACxBR,EACSC,GACNvB,MAAK,SAACkD,GACuB,IAAxBA,EAAI3B,KAAK4B,YACXlB,EAASsI,IAAgB,IACzBtI,EAASH,EAAe,eAExBE,EAAqBkB,EAAI3B,KAAMU,MAGlCqB,OAAM,SAAC5B,GACNU,EAAyBV,EAAOO,SCClCwI,EAAOW,eAIX,OAAIxE,EACK,cAAC,IAAD,CAAU0C,GAAG,mBAIpB,cAACP,EAAA,EAAD,CAAMC,WAAS,EAACqC,eAAgB,SAAhC,SACE,cAACtC,EAAA,EAAD,CAAMT,MAAI,EAAC+C,eAAgB,SAA3B,SACE,sBAAMF,SAAUV,EAAOa,aAAvB,SACE,eAACC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,WACE,yDAEE,oBACEC,KAAM,wCACNC,OAAQ,SAFV,UAIG,IAJH,aAQF,wEACA,0DACA,kDAEF,eAACC,GAAA,EAAD,WACE,cAACvH,EAAA,EAAD,aACEQ,MAAM,QACNgH,OAAO,UACHnB,EAAOoB,cAAc,WAE1BpB,EAAOQ,OAAOL,MACb,qBAAKhD,MAAO,CAAE7C,MAAO,OAArB,SAA+B0F,EAAOQ,OAAOL,QAC3C,KACJ,cAACxG,EAAA,EAAD,aACEvC,KAAK,WACL+C,MAAM,WACNgH,OAAO,UACHnB,EAAOoB,cAAc,cAE1BpB,EAAOQ,OAAOJ,SACb,qBAAKjD,MAAO,CAAE7C,MAAO,OAArB,SAA+B0F,EAAOQ,OAAOJ,WAC3C,KACJ,cAACiB,GAAA,EAAD,CACElH,MAAO,cACPmH,QACE,cAACxF,EAAA,EAAD,CACEyF,KAAK,aACLzH,SAAUkG,EAAOwB,aACjBlG,QAAS0E,EAAOO,OAAOF,eAI7B,cAAChD,EAAA,EAAD,CAAQjG,KAAM,SAAUwC,QAAS,YAAaU,MAAO,UAArD,gC,UCnBCmH,OAlEf,WACE,IAAMzK,EAASuG,aACb,SAACC,GAAD,OAAWA,EAAM2B,IAAInI,UAGjBE,EAAgBqG,aACpB,SAACC,GAAD,OAAWA,EAAM2B,IAAIjI,iBAGjBiF,EAAaoB,aACjB,SAACC,GAAD,OAAWA,EAAMC,KAAKtB,cAGlB3E,EAAWyE,cASjB,OARAC,qBAAU,WACR1E,GFiBiC,SAACA,GACpCX,IAAatB,MAAK,SAACkD,GACW,IAAxBA,EAAI3B,KAAK4B,YACXlB,EAASsI,IAAgB,IACzBtI,EAASF,GAAsB,IAC/BE,EAASH,EAAe,gBAExBG,EAASsI,IAAgB,IACzBtI,EAASH,EAAe,cACxBG,EAASF,GAAsB,aEzBhC,IAMEJ,EAgBH,sBAAK2E,UAAU,MAAf,UACE,cAACqD,GAAD,IACA,eAACwC,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACE,eAACC,EAAA,EAAD,WACE,cAACvH,EAAA,EAAD,CAAYwH,KAAK,QAAQvH,MAAM,UAAUwH,aAAW,OAApD,SACE,cAACC,GAAA,EAAD,MAEF,cAACC,GAAA,EAAD,CAAYpI,QAAQ,KAApB,kBACCuC,GACC,cAACkB,EAAA,EAAD,CAAQ/C,MAAM,UAAUC,QA7BZ,WACpB/C,GF0B0B,SAACA,GAC7BA,EAASH,EAAe,YACxBR,IAEGtB,MAAK,SAACkD,GACuB,IAAxBA,EAAI3B,KAAK4B,YACXlB,EAASsI,IAAgB,IACzBtI,EAASH,EAAe,gBAExBG,EAASsI,IAAgB,IACzBvI,EAAqBkB,EAAI3B,KAAMU,OAGlCqB,OAAM,SAAC5B,GACNU,EAAyBV,EAAOO,UEZ1B,uBAKQ,YAAXR,GAAwB,cAACiL,GAAA,EAAD,OAE3B,cAACC,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,iBAAiBC,QAAS,cAAC,EAAD,MACtC,cAAC,IAAD,CAAOD,KAAK,uBAAuBC,QAAS,cAAC,GAAD,MAC5C,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAUxD,GAAG,QACtC,cAAC,IAAD,CAAOuD,KAAK,OAAOC,QAAS,8DAnChC,qBACElF,MAAO,CACLwE,SAAU,QACVW,IAAK,MACLC,UAAW,SACX1C,MAAO,QALX,SAQE,cAAC2C,GAAA,EAAD,O,mBC5CFC,GAAcC,aAAgB,CAClCzK,MVD0B,WAAgF,IAA/EuF,EAA8E,uDAAtDzG,EAAc4B,EAAwC,uCACvG,OAAQA,EAAOvB,MACX,IAAK,cACD,OAAO,2BAAIoG,GAAX,kBAAmB7E,EAAOjC,WAAa8G,EAAM7E,EAAOjC,YAAYqG,QAAO,SAAA5E,GAAC,OAAIA,EAAE5B,KAAOoC,EAAOhC,YAChG,IAAK,WACD,OAAO,2BAAI6G,GAAX,kBAAmB7E,EAAOX,KAAK2K,WAA/B,CAA6ChK,EAAOX,MAApD,mBAA6DwF,EAAM7E,EAAOX,KAAK2K,gBACnF,IAAK,cACD,OAAO,2BACAnF,GADP,kBAEK7E,EAAOjC,WAAa8G,EAAM7E,EAAOjC,YAC7BwG,KAAI,SAAA/E,GAAC,OAAIA,EAAE5B,KAAOoC,EAAOhC,OAAhB,2BAA6BwB,GAAMQ,EAAO/B,OAASuB,OAEzE,IAAK,eACD,OAAO,2BAAIqF,GAAX,kBAAmB7E,EAAO0D,SAAS9F,GAAK,KAC5C,IAAK,kBACD,IAAMqM,EAAS,eAAOpF,GAEtB,cADOoF,EAAUjK,EAAOpC,IACjBqM,EACX,IAAK,gBACD,IAAMA,EAAS,eAAOpF,GAItB,OAHA7E,EAAO+E,UAAUmF,SAAQ,SAAAnE,GACrBkE,EAAUlE,EAAGnI,IAAM,MAEhBqM,EAEX,IAAK,YACD,OAAO,2BAAIpF,GAAX,kBAAmB7E,EAAOjC,WAAaiC,EAAOV,QAClD,QACI,OAAOuF,IU1BjBE,UZL8B,WAAsG,IAArGF,EAAoG,uDAAjEzG,EAAc4B,EAAmD,uCACjI,OAAQA,EAAOvB,MACX,IAAK,kBACD,OAAOoG,EAAMT,QAAO,SAAA2B,GAAE,OAAIA,EAAGnI,KAAOoC,EAAOpC,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAYoC,EAAO0D,UAAnB,IAA6BU,OAAQ,MAAOE,aAAc,UAA1D,mBAAsEO,IAE1E,IAAK,wBACD,OAAOA,EAAMN,KAAI,SAAAwB,GAAE,OAAIA,EAAGnI,KAAOoC,EAAOpC,GAAjB,2BAA0BmI,GAA1B,IAA8BrI,MAAOsC,EAAOtC,QAASqI,KAChF,IAAK,yBACD,OAAOlB,EAAMN,KAAI,SAAAwB,GAAE,OAAIA,EAAGnI,KAAOoC,EAAOpC,GAAjB,2BAA0BmI,GAA1B,IAA8B3B,OAAQpE,EAAOoE,SAAU2B,KAClF,IAAK,gCACD,OAAOlB,EAAMN,KAAI,SAAAwB,GAAE,OAAIA,EAAGnI,KAAOoC,EAAOpC,GAAjB,2BAA0BmI,GAA1B,IAA8BzB,aAActE,EAAO3B,SAAU0H,KACxF,IAAK,gBACD,OAAO/F,EAAO+E,UAAUR,KAAI,SAAAwB,GAAE,kCAASA,GAAT,IAAa3B,OAAQ,MAAOE,aAAc,YAC5E,QACI,OAAOO,IYVjB2B,IbNwB,WAGF,IAFtB3B,EAEqB,uDAFKzG,EAC1B4B,EACqB,uCACrB,OAAQA,EAAOvB,MACb,IAAK,iBACH,OAAO,2BAAKoG,GAAZ,IAAmBxG,OAAQ2B,EAAO3B,SACpC,IAAK,gBACH,OAAO,2BAAKwG,GAAZ,IAAmBvG,MAAO0B,EAAO1B,QACnC,IAAK,yBACH,OAAO,2BAAKuG,GAAZ,IAAmBtG,cAAeyB,EAAOzB,gBAC3C,QACE,OAAO,eAAKsG,KaLhBC,KHKyB,WAGH,IAFtBD,EAEqB,uDAFKzG,GAC1B4B,EACqB,uCACrB,OAAQA,EAAOvB,MACb,IAAK,yBACH,OAAO,2BAAKoG,GAAZ,IAAmBrB,WAAYxD,EAAOkB,QACxC,QACE,OAAO2D,MGVAsF,GAAQC,aAAYN,GAAaO,aAAgBC,OAM9DC,OAAOJ,MAAQA,G,aCbfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACE,cAAC,GAAD,UAINQ,SAASC,eAAe,SAM1BnO,M","file":"static/js/main.e021db60.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"0d5dafff-c621-4405-9828-f143351e7294\",\r\n  },\r\n});\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>(\"todo-lists\");\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<\r\n      { title: string },\r\n      AxiosResponse<ResponseType<{ item: TodolistType }>>\r\n    >(\"todo-lists\", { title });\r\n  },\r\n  deleteTodolist(id: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<{ title: string }, AxiosResponse<ResponseType>>(\r\n      `todo-lists/${id}`,\r\n      { title }\r\n    );\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`\r\n    );\r\n  },\r\n  createTask(todolistId: string, title: string) {\r\n    return instance.post<\r\n      { title: string },\r\n      AxiosResponse<ResponseType<{ item: TaskType }>>\r\n    >(`todo-lists/${todolistId}/tasks`, { title });\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<\r\n      UpdateTaskModelType,\r\n      AxiosResponse<ResponseType<{ item: TaskType }>>\r\n    >(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n  },\r\n};\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get<ResponseType<AuthResponseDataType>>(\"auth/me\");\r\n  },\r\n  login(data: {\r\n    email: string;\r\n    password: string;\r\n    rememberMe?: boolean;\r\n    captcha?: boolean;\r\n  }) {\r\n    return instance.post<\r\n      AuthLoginRequestType,\r\n      AxiosResponse<ResponseType<{ userId: number }>>\r\n    >(\"auth/login\", data);\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType>(\"auth/login\");\r\n  },\r\n};\r\n// types\r\nexport type AuthLoginRequestType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe?: boolean;\r\n  captcha?: boolean;\r\n};\r\nexport type AuthResponseDataType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\nexport type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  addedDate: string;\r\n  order: number;\r\n};\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: D;\r\n};\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n};\r\nexport type UpdateTaskModelType = {\r\n  title: string;\r\n  description: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n};\r\ntype GetTasksResponse = {\r\n  error: string | null;\r\n  totalCount: number;\r\n  items: TaskType[];\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState: InitialStateType = {\r\n  status: \"idle\",\r\n  error: null,\r\n  isInitialized: false,\r\n};\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"APP/SET-STATUS\":\r\n      return { ...state, status: action.status };\r\n    case \"APP/SET-ERROR\":\r\n      return { ...state, error: action.error };\r\n    case \"APP/SET-INITIALIZATION\":\r\n      return { ...state, isInitialized: action.isInitialized };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType;\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: string | null;\r\n  // проинициализировано ли приложение\r\n  isInitialized: boolean;\r\n};\r\n\r\nexport const setAppErrorAC = (error: string | null) =>\r\n  ({ type: \"APP/SET-ERROR\", error } as const);\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n  ({ type: \"APP/SET-STATUS\", status } as const);\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) =>\r\n  ({ type: \"APP/SET-INITIALIZATION\", isInitialized } as const);\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetAppIsInitializedType = ReturnType<typeof setAppIsInitializedAC>;\r\n\r\ntype ActionsType =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | SetAppIsInitializedType;\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { AddItemForm } from \"../../../components/AddItemForm/AddItemForm\";\r\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport { Task } from \"./Task/Task\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/todolists-api\";\r\nimport { FilterValuesType, TodolistDomainType } from \"../todolists-reducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchTasksTC } from \"../tasks-reducer\";\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType;\r\n  tasks: Array<TaskType>;\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void;\r\n  addTask: (title: string, todolistId: string) => void;\r\n  changeTaskStatus: (\r\n    id: string,\r\n    status: TaskStatuses,\r\n    todolistId: string\r\n  ) => void;\r\n  changeTaskTitle: (\r\n    taskId: string,\r\n    newTitle: string,\r\n    todolistId: string\r\n  ) => void;\r\n  removeTask: (taskId: string, todolistId: string) => void;\r\n  removeTodolist: (id: string) => void;\r\n  changeTodolistTitle: (id: string, newTitle: string) => void;\r\n  isLoggedIn: boolean;\r\n};\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n  console.log(\"Todolist called\");\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (!props.isLoggedIn) return;\r\n    const thunk = fetchTasksTC(props.todolist.id);\r\n    dispatch(thunk);\r\n  }, []);\r\n\r\n  const addTask = useCallback(\r\n    (title: string) => {\r\n      props.addTask(title, props.todolist.id);\r\n    },\r\n    [props.addTask, props.todolist.id]\r\n  );\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist(props.todolist.id);\r\n  };\r\n  const changeTodolistTitle = useCallback(\r\n    (title: string) => {\r\n      props.changeTodolistTitle(props.todolist.id, title);\r\n    },\r\n    [props.todolist.id, props.changeTodolistTitle]\r\n  );\r\n\r\n  const onAllClickHandler = useCallback(\r\n    () => props.changeFilter(\"all\", props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  );\r\n  const onActiveClickHandler = useCallback(\r\n    () => props.changeFilter(\"active\", props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  );\r\n  const onCompletedClickHandler = useCallback(\r\n    () => props.changeFilter(\"completed\", props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  );\r\n\r\n  let tasksForTodolist = props.tasks;\r\n\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = props.tasks.filter((t) => t.status === TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = props.tasks.filter(\r\n      (t) => t.status === TaskStatuses.Completed\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan\r\n          value={props.todolist.title}\r\n          onChange={changeTodolistTitle}\r\n        />\r\n        <IconButton\r\n          onClick={removeTodolist}\r\n          disabled={props.todolist.entityStatus === \"loading\"}\r\n        >\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm\r\n        addItem={addTask}\r\n        disabled={props.todolist.entityStatus === \"loading\"}\r\n      />\r\n      <div>\r\n        {tasksForTodolist.map((t) => (\r\n          <Task\r\n            key={t.id}\r\n            task={t}\r\n            todolistId={props.todolist.id}\r\n            removeTask={props.removeTask}\r\n            changeTaskTitle={props.changeTaskTitle}\r\n            changeTaskStatus={props.changeTaskStatus}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div style={{ paddingTop: \"10px\" }}>\r\n        <Button\r\n          variant={props.todolist.filter === \"all\" ? \"outlined\" : \"text\"}\r\n          onClick={onAllClickHandler}\r\n          color={\"inherit\"}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          variant={props.todolist.filter === \"active\" ? \"outlined\" : \"text\"}\r\n          onClick={onActiveClickHandler}\r\n          color={\"primary\"}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          variant={props.todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n          onClick={onCompletedClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType,\r\n} from \"./todolists-reducer\";\r\nimport {\r\n  addTaskTC,\r\n  removeTaskTC,\r\n  TasksStateType,\r\n  updateTaskTC,\r\n} from \"./tasks-reducer\";\r\nimport { TaskStatuses } from \"../../api/todolists-api\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\r\nimport { Todolist } from \"./Todolist/Todolist\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\r\n    (state) => state.todolists\r\n  );\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(\r\n    (state) => state.tasks\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return;\r\n    }\r\n    const thunk = fetchTodolistsTC();\r\n    dispatch(thunk);\r\n  }, []);\r\n\r\n  const removeTask = useCallback(function (id: string, todolistId: string) {\r\n    const thunk = removeTaskTC(id, todolistId);\r\n    dispatch(thunk);\r\n  }, []);\r\n\r\n  const addTask = useCallback(function (title: string, todolistId: string) {\r\n    const thunk = addTaskTC(title, todolistId);\r\n    dispatch(thunk);\r\n  }, []);\r\n\r\n  const changeStatus = useCallback(function (\r\n    id: string,\r\n    status: TaskStatuses,\r\n    todolistId: string\r\n  ) {\r\n    const thunk = updateTaskTC(id, { status }, todolistId);\r\n    dispatch(thunk);\r\n  },\r\n  []);\r\n\r\n  const changeTaskTitle = useCallback(function (\r\n    id: string,\r\n    newTitle: string,\r\n    todolistId: string\r\n  ) {\r\n    const thunk = updateTaskTC(id, { title: newTitle }, todolistId);\r\n    dispatch(thunk);\r\n  },\r\n  []);\r\n\r\n  const changeFilter = useCallback(function (\r\n    value: FilterValuesType,\r\n    todolistId: string\r\n  ) {\r\n    const action = changeTodolistFilterAC(todolistId, value);\r\n    dispatch(action);\r\n  },\r\n  []);\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n    const thunk = removeTodolistTC(id);\r\n    dispatch(thunk);\r\n  }, []);\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n    const thunk = changeTodolistTitleTC(id, title);\r\n    dispatch(thunk);\r\n  }, []);\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      const thunk = addTodolistTC(title);\r\n      dispatch(thunk);\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"20px\" }}>\r\n        <AddItemForm addItem={addTodolist} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todolists.map((tl) => {\r\n          let allTodolistTasks = tasks[tl.id];\r\n\r\n          return (\r\n            <Grid item key={tl.id}>\r\n              <Paper style={{ padding: \"10px\" }}>\r\n                <Todolist\r\n                  isLoggedIn={isLoggedIn}\r\n                  todolist={tl}\r\n                  tasks={allTodolistTasks}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  addTask={addTask}\r\n                  changeTaskStatus={changeStatus}\r\n                  removeTodolist={removeTodolist}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodolistTitle={changeTodolistTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import { setAppIsInitializedAC } from \"./../../app/app-reducer\";\nimport { Dispatch } from \"redux\";\nimport { authAPI, AuthLoginRequestType } from \"../../api/todolists-api\";\nimport {\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from \"../../app/app-reducer\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\n\nconst initialState = {\n  isLoggedIn: false,\n};\ntype InitialStateType = typeof initialState;\n\nexport const authReducer = (\n  state: InitialStateType = initialState,\n  action: ActionsType\n): InitialStateType => {\n  switch (action.type) {\n    case \"login/SET-IS-LOGGED-IN\":\n      return { ...state, isLoggedIn: action.value };\n    default:\n      return state;\n  }\n};\n// actions\nexport const setIsLoggedInAC = (value: boolean) => {\n  return { type: \"login/SET-IS-LOGGED-IN\", value } as const;\n};\n\n// thunks\nexport const loginTC =\n  (data: AuthLoginRequestType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    authAPI\n      .login(data)\n      .then((res) => {\n        if (res.data.resultCode === 0) {\n          dispatch(setIsLoggedInAC(true));\n          dispatch(setAppStatusAC(\"succeeded\"));\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch((error) => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n  authAPI.me().then((res) => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC(true));\n      dispatch(setAppIsInitializedAC(true));\n      dispatch(setAppStatusAC(\"succeeded\"));\n    } else {\n      dispatch(setIsLoggedInAC(false));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(setAppIsInitializedAC(true));\n    }\n  });\n};\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  authAPI\n    .logout()\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(false));\n        dispatch(setAppStatusAC(\"succeeded\"));\n      } else {\n        dispatch(setIsLoggedInAC(false));\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\n// types\ntype ActionsType =\n  | ReturnType<typeof setIsLoggedInAC>\n  | SetAppStatusActionType\n  | SetAppErrorActionType;\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { useFormik } from \"formik\";\nimport { loginTC } from \"./auth-reducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateType } from \"../../app/store\";\nimport { Navigate } from \"react-router-dom\";\n\nexport const Login = () => {\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    (state) => state.auth.isLoggedIn\n  );\n  const dispatch = useDispatch();\n\n  type FormikErrorType = {\n    email?: string;\n    password?: string;\n    rememberMe?: boolean;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    validate: (values) => {\n      const errors: FormikErrorType = {};\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n      if (!values.password) errors.password = \"Required\";\n      else if (values.password.length < 3)\n        errors.password = \"Password is too short\";\n      return errors;\n    },\n\n    onSubmit: (values) => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    },\n  });\n\n  if (isLoggedIn) {\n    return <Navigate to=\"/todolists_spa\" />;\n  }\n\n  return (\n    <Grid container justifyContent={\"center\"}>\n      <Grid item justifyContent={\"center\"}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a\n                  href={\"https://social-network.samuraijs.com/\"}\n                  target={\"_blank\"}\n                >\n                  {\" \"}\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps(\"email\")}\n              />\n              {formik.errors.email ? (\n                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\n              ) : null}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps(\"password\")}\n              />\n              {formik.errors.password ? (\n                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\n              ) : null}\n              <FormControlLabel\n                label={\"Remember me\"}\n                control={\n                  <Checkbox\n                    name=\"rememberMe\"\n                    onChange={formik.handleChange}\n                    checked={formik.values.rememberMe}\n                  />\n                }\n              />\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { TodolistsList } from \"../features/TodolistsList/TodolistsList\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"./store\";\r\nimport { RequestStatusType } from \"./app-reducer\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport { Menu } from \"@mui/icons-material\";\r\nimport { ErrorSnackbar } from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { Login } from \"../features/Login/Login\";\r\nimport { initializeAppTC, logoutTC } from \"../features/Login/auth-reducer\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { debug } from \"console\";\r\n\r\nfunction App() {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.app.isInitialized\r\n  );\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC());\r\n  }, []);\r\n\r\n  const onClickLogout = () => {\r\n    dispatch(logoutTC());\r\n  };\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"30%\",\r\n          textAlign: \"center\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">News</Typography>\r\n          {isLoggedIn && (\r\n            <Button color=\"inherit\" onClick={onClickLogout}>\r\n              Logout\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n        {status === \"loading\" && <LinearProgress />}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path=\"/todolists_spa\" element={<TodolistsList />} />\r\n          <Route path=\"/todolists_spa/login\" element={<Login />} />\r\n          <Route path=\"*\" element={<Navigate to=\"/\" />} />\r\n          <Route path=\"/404\" element={<h1>404 Page not found</h1>} />\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { tasksReducer } from \"../features/TodolistsList/tasks-reducer\";\r\nimport { todolistsReducer } from \"../features/TodolistsList/todolists-reducer\";\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { authReducer } from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n});\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./app/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}